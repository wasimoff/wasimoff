// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/messages.proto

package wasimoffv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "wasi.team/proto/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TasksName is the fully-qualified name of the Tasks service.
	TasksName = "wasimoff.v1.Tasks"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TasksRunWasip1Procedure is the fully-qualified name of the Tasks's RunWasip1 RPC.
	TasksRunWasip1Procedure = "/wasimoff.v1.Tasks/RunWasip1"
	// TasksRunWasip1JobProcedure is the fully-qualified name of the Tasks's RunWasip1Job RPC.
	TasksRunWasip1JobProcedure = "/wasimoff.v1.Tasks/RunWasip1Job"
	// TasksRunPyodideProcedure is the fully-qualified name of the Tasks's RunPyodide RPC.
	TasksRunPyodideProcedure = "/wasimoff.v1.Tasks/RunPyodide"
	// TasksUploadProcedure is the fully-qualified name of the Tasks's Upload RPC.
	TasksUploadProcedure = "/wasimoff.v1.Tasks/Upload"
)

// TasksClient is a client for the wasimoff.v1.Tasks service.
type TasksClient interface {
	// offload a WebAssembly WASI preview 1 tasks
	RunWasip1(context.Context, *connect.Request[v1.Task_Wasip1_Request]) (*connect.Response[v1.Task_Wasip1_Response], error)
	RunWasip1Job(context.Context, *connect.Request[v1.Task_Wasip1_JobRequest]) (*connect.Response[v1.Task_Wasip1_JobResponse], error)
	// offload a Python task in Pyodide
	RunPyodide(context.Context, *connect.Request[v1.Task_Pyodide_Request]) (*connect.Response[v1.Task_Pyodide_Response], error)
	// upload a file to the broker
	Upload(context.Context, *connect.Request[v1.Filesystem_Upload_Request]) (*connect.Response[v1.Filesystem_Upload_Response], error)
}

// NewTasksClient constructs a client for the wasimoff.v1.Tasks service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTasksClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TasksClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tasksMethods := v1.File_proto_v1_messages_proto.Services().ByName("Tasks").Methods()
	return &tasksClient{
		runWasip1: connect.NewClient[v1.Task_Wasip1_Request, v1.Task_Wasip1_Response](
			httpClient,
			baseURL+TasksRunWasip1Procedure,
			connect.WithSchema(tasksMethods.ByName("RunWasip1")),
			connect.WithClientOptions(opts...),
		),
		runWasip1Job: connect.NewClient[v1.Task_Wasip1_JobRequest, v1.Task_Wasip1_JobResponse](
			httpClient,
			baseURL+TasksRunWasip1JobProcedure,
			connect.WithSchema(tasksMethods.ByName("RunWasip1Job")),
			connect.WithClientOptions(opts...),
		),
		runPyodide: connect.NewClient[v1.Task_Pyodide_Request, v1.Task_Pyodide_Response](
			httpClient,
			baseURL+TasksRunPyodideProcedure,
			connect.WithSchema(tasksMethods.ByName("RunPyodide")),
			connect.WithClientOptions(opts...),
		),
		upload: connect.NewClient[v1.Filesystem_Upload_Request, v1.Filesystem_Upload_Response](
			httpClient,
			baseURL+TasksUploadProcedure,
			connect.WithSchema(tasksMethods.ByName("Upload")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tasksClient implements TasksClient.
type tasksClient struct {
	runWasip1    *connect.Client[v1.Task_Wasip1_Request, v1.Task_Wasip1_Response]
	runWasip1Job *connect.Client[v1.Task_Wasip1_JobRequest, v1.Task_Wasip1_JobResponse]
	runPyodide   *connect.Client[v1.Task_Pyodide_Request, v1.Task_Pyodide_Response]
	upload       *connect.Client[v1.Filesystem_Upload_Request, v1.Filesystem_Upload_Response]
}

// RunWasip1 calls wasimoff.v1.Tasks.RunWasip1.
func (c *tasksClient) RunWasip1(ctx context.Context, req *connect.Request[v1.Task_Wasip1_Request]) (*connect.Response[v1.Task_Wasip1_Response], error) {
	return c.runWasip1.CallUnary(ctx, req)
}

// RunWasip1Job calls wasimoff.v1.Tasks.RunWasip1Job.
func (c *tasksClient) RunWasip1Job(ctx context.Context, req *connect.Request[v1.Task_Wasip1_JobRequest]) (*connect.Response[v1.Task_Wasip1_JobResponse], error) {
	return c.runWasip1Job.CallUnary(ctx, req)
}

// RunPyodide calls wasimoff.v1.Tasks.RunPyodide.
func (c *tasksClient) RunPyodide(ctx context.Context, req *connect.Request[v1.Task_Pyodide_Request]) (*connect.Response[v1.Task_Pyodide_Response], error) {
	return c.runPyodide.CallUnary(ctx, req)
}

// Upload calls wasimoff.v1.Tasks.Upload.
func (c *tasksClient) Upload(ctx context.Context, req *connect.Request[v1.Filesystem_Upload_Request]) (*connect.Response[v1.Filesystem_Upload_Response], error) {
	return c.upload.CallUnary(ctx, req)
}

// TasksHandler is an implementation of the wasimoff.v1.Tasks service.
type TasksHandler interface {
	// offload a WebAssembly WASI preview 1 tasks
	RunWasip1(context.Context, *connect.Request[v1.Task_Wasip1_Request]) (*connect.Response[v1.Task_Wasip1_Response], error)
	RunWasip1Job(context.Context, *connect.Request[v1.Task_Wasip1_JobRequest]) (*connect.Response[v1.Task_Wasip1_JobResponse], error)
	// offload a Python task in Pyodide
	RunPyodide(context.Context, *connect.Request[v1.Task_Pyodide_Request]) (*connect.Response[v1.Task_Pyodide_Response], error)
	// upload a file to the broker
	Upload(context.Context, *connect.Request[v1.Filesystem_Upload_Request]) (*connect.Response[v1.Filesystem_Upload_Response], error)
}

// NewTasksHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTasksHandler(svc TasksHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tasksMethods := v1.File_proto_v1_messages_proto.Services().ByName("Tasks").Methods()
	tasksRunWasip1Handler := connect.NewUnaryHandler(
		TasksRunWasip1Procedure,
		svc.RunWasip1,
		connect.WithSchema(tasksMethods.ByName("RunWasip1")),
		connect.WithHandlerOptions(opts...),
	)
	tasksRunWasip1JobHandler := connect.NewUnaryHandler(
		TasksRunWasip1JobProcedure,
		svc.RunWasip1Job,
		connect.WithSchema(tasksMethods.ByName("RunWasip1Job")),
		connect.WithHandlerOptions(opts...),
	)
	tasksRunPyodideHandler := connect.NewUnaryHandler(
		TasksRunPyodideProcedure,
		svc.RunPyodide,
		connect.WithSchema(tasksMethods.ByName("RunPyodide")),
		connect.WithHandlerOptions(opts...),
	)
	tasksUploadHandler := connect.NewUnaryHandler(
		TasksUploadProcedure,
		svc.Upload,
		connect.WithSchema(tasksMethods.ByName("Upload")),
		connect.WithHandlerOptions(opts...),
	)
	return "/wasimoff.v1.Tasks/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TasksRunWasip1Procedure:
			tasksRunWasip1Handler.ServeHTTP(w, r)
		case TasksRunWasip1JobProcedure:
			tasksRunWasip1JobHandler.ServeHTTP(w, r)
		case TasksRunPyodideProcedure:
			tasksRunPyodideHandler.ServeHTTP(w, r)
		case TasksUploadProcedure:
			tasksUploadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTasksHandler returns CodeUnimplemented from all methods.
type UnimplementedTasksHandler struct{}

func (UnimplementedTasksHandler) RunWasip1(context.Context, *connect.Request[v1.Task_Wasip1_Request]) (*connect.Response[v1.Task_Wasip1_Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasimoff.v1.Tasks.RunWasip1 is not implemented"))
}

func (UnimplementedTasksHandler) RunWasip1Job(context.Context, *connect.Request[v1.Task_Wasip1_JobRequest]) (*connect.Response[v1.Task_Wasip1_JobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasimoff.v1.Tasks.RunWasip1Job is not implemented"))
}

func (UnimplementedTasksHandler) RunPyodide(context.Context, *connect.Request[v1.Task_Pyodide_Request]) (*connect.Response[v1.Task_Pyodide_Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasimoff.v1.Tasks.RunPyodide is not implemented"))
}

func (UnimplementedTasksHandler) Upload(context.Context, *connect.Request[v1.Filesystem_Upload_Request]) (*connect.Response[v1.Filesystem_Upload_Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wasimoff.v1.Tasks.Upload is not implemented"))
}
